// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: tasks.sql

package db

import (
	"context"
	"database/sql"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (
    title,
    text
) VALUES (
    $1,
    $2
) RETURNING id
`

type CreateTaskParams struct {
	Title string         `json:"title"`
	Text  sql.NullString `json:"text"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createTask, arg.Title, arg.Text)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks WHERE id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTask, id)
	return err
}

const getTask = `-- name: GetTask :one
SELECT id, title, text, created_at, updated_at, done FROM tasks WHERE id = $1
`

func (q *Queries) GetTask(ctx context.Context, id int64) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Text,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Done,
	)
	return i, err
}

const getTaskTitles = `-- name: GetTaskTitles :many
SELECT id, title, done FROM tasks LIMIT $1 OFFSET $2
`

type GetTaskTitlesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetTaskTitlesRow struct {
	ID    int64        `json:"id"`
	Title string       `json:"title"`
	Done  sql.NullBool `json:"done"`
}

func (q *Queries) GetTaskTitles(ctx context.Context, arg GetTaskTitlesParams) ([]GetTaskTitlesRow, error) {
	rows, err := q.db.QueryContext(ctx, getTaskTitles, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTaskTitlesRow{}
	for rows.Next() {
		var i GetTaskTitlesRow
		if err := rows.Scan(&i.ID, &i.Title, &i.Done); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const search = `-- name: Search :many
SELECT id, title, done FROM tasks
                       WHERE to_tsvector(title) @@ plainto_tsquery($1)
   OR to_tsvector(text) @@ plainto_tsquery($1)
`

type SearchRow struct {
	ID    int64        `json:"id"`
	Title string       `json:"title"`
	Done  sql.NullBool `json:"done"`
}

func (q *Queries) Search(ctx context.Context, plaintoTsquery string) ([]SearchRow, error) {
	rows, err := q.db.QueryContext(ctx, search, plaintoTsquery)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SearchRow{}
	for rows.Next() {
		var i SearchRow
		if err := rows.Scan(&i.ID, &i.Title, &i.Done); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setDone = `-- name: SetDone :exec
UPDATE tasks SET done = $1 WHERE id = $2
`

type SetDoneParams struct {
	Done sql.NullBool `json:"done"`
	ID   int64        `json:"id"`
}

func (q *Queries) SetDone(ctx context.Context, arg SetDoneParams) error {
	_, err := q.db.ExecContext(ctx, setDone, arg.Done, arg.ID)
	return err
}

const updateTaskText = `-- name: UpdateTaskText :exec
UPDATE tasks SET text = $1 WHERE id = $2
`

type UpdateTaskTextParams struct {
	Text sql.NullString `json:"text"`
	ID   int64          `json:"id"`
}

func (q *Queries) UpdateTaskText(ctx context.Context, arg UpdateTaskTextParams) error {
	_, err := q.db.ExecContext(ctx, updateTaskText, arg.Text, arg.ID)
	return err
}

const updateTaskTitle = `-- name: UpdateTaskTitle :exec
UPDATE tasks SET title = $1 WHERE id = $2
`

type UpdateTaskTitleParams struct {
	Title string `json:"title"`
	ID    int64  `json:"id"`
}

func (q *Queries) UpdateTaskTitle(ctx context.Context, arg UpdateTaskTitleParams) error {
	_, err := q.db.ExecContext(ctx, updateTaskTitle, arg.Title, arg.ID)
	return err
}
